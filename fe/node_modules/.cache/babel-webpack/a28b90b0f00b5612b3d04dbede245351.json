{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/Desktop/FullStack/JB/Third Project/fe/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from 'src/environments/environment';\nimport OrderModel from '../models/order.model';\nimport store from '../redux/store';\nimport { orderAddedAction, ordersDownloadedAction } from '../redux/orders-state';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrdersService {\n  constructor(http) {\n    this.http = http;\n  } // Get all Orders: \n\n\n  getAllOrders() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (store.getState().ordersState.orders.length === 0) {\n        const orders = yield _this.http.get(environment.ordersUrl).toPromise();\n        store.dispatch(ordersDownloadedAction(orders));\n      }\n\n      return store.getState().ordersState.orders;\n    })();\n  } // Get all UserOrders: \n\n\n  getAllUserOrders(userId) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (store.getState().ordersState.orders.length === 0) {\n        const orders = yield _this2.http.get(environment.ordersUrl + \"all/\" + userId).toPromise();\n        store.dispatch(ordersDownloadedAction(orders));\n      }\n\n      return store.getState().ordersState.orders;\n    })();\n  } // Get one order: \n\n\n  getOneOrder(id) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (store.getState().ordersState.orders.length === 0) {\n        const orders = yield _this3.http.get(environment.ordersUrl).toPromise();\n        store.dispatch(ordersDownloadedAction(orders));\n      }\n\n      const order = store.getState().ordersState.orders.find(p => p._id === id);\n      return order;\n    })();\n  } // Add order: \n\n\n  addOrder(order) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const myFormData = OrderModel.convertToFormData(order);\n      const addedOrder = yield _this4.http.post(environment.ordersUrl, myFormData).toPromise();\n      store.dispatch(orderAddedAction(addedOrder));\n      return addedOrder;\n    })();\n  }\n\n}\n\nOrdersService.ɵfac = function OrdersService_Factory(t) {\n  return new (t || OrdersService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nOrdersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrdersService,\n  factory: OrdersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\FullStack\\JB\\Third Project\\fe\\src\\app\\services\\orders.service.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAA4B,8BAA5B;AACA,OAAO,UAAP,MAAuB,uBAAvB;AACA,OAAO,KAAP,MAAkB,gBAAlB;AACA,SAAS,gBAAT,EAA2B,sBAA3B,QAAyD,uBAAzD;;;AAMA,OAAM,MAAO,aAAP,CAAoB;AAExB,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA;AAAqB,GAFjB,CAItB;;;AACa,EAAA,YAAY,GAAA;AAAA;;AAAA;AACrB,UAAI,KAAK,CAAC,QAAN,GAAiB,WAAjB,CAA6B,MAA7B,CAAoC,MAApC,KAA+C,CAAnD,EAAsD;AAClD,cAAM,MAAM,SAAS,KAAI,CAAC,IAAL,CAAU,GAAV,CAA4B,WAAW,CAAC,SAAxC,EAAmD,SAAnD,EAArB;AACA,QAAA,KAAK,CAAC,QAAN,CAAe,sBAAsB,CAAC,MAAD,CAArC;AACH;;AACD,aAAO,KAAK,CAAC,QAAN,GAAiB,WAAjB,CAA6B,MAApC;AALqB;AAMxB,GAXqB,CAatB;;;AACa,EAAA,gBAAgB,CAAC,MAAD,EAAe;AAAA;;AAAA;AACxC,UAAI,KAAK,CAAC,QAAN,GAAiB,WAAjB,CAA6B,MAA7B,CAAoC,MAApC,KAA+C,CAAnD,EAAsD;AAClD,cAAM,MAAM,SAAS,MAAI,CAAC,IAAL,CAAU,GAAV,CAA4B,WAAW,CAAC,SAAZ,GAAwB,MAAxB,GAAiC,MAA7D,EAAqE,SAArE,EAArB;AACA,QAAA,KAAK,CAAC,QAAN,CAAe,sBAAsB,CAAC,MAAD,CAArC;AACH;;AACD,aAAO,KAAK,CAAC,QAAN,GAAiB,WAAjB,CAA6B,MAApC;AALwC;AAM3C,GApBqB,CAsBtB;;;AACa,EAAA,WAAW,CAAC,EAAD,EAAW;AAAA;;AAAA;AAC/B,UAAI,KAAK,CAAC,QAAN,GAAiB,WAAjB,CAA6B,MAA7B,CAAoC,MAApC,KAA+C,CAAnD,EAAsD;AAClD,cAAM,MAAM,SAAS,MAAI,CAAC,IAAL,CAAU,GAAV,CAA4B,WAAW,CAAC,SAAxC,EAAmD,SAAnD,EAArB;AACA,QAAA,KAAK,CAAC,QAAN,CAAe,sBAAsB,CAAC,MAAD,CAArC;AACH;;AACD,YAAM,KAAK,GAAG,KAAK,CAAC,QAAN,GAAiB,WAAjB,CAA6B,MAA7B,CAAoC,IAApC,CAAyC,CAAC,IAAI,CAAC,CAAC,GAAF,KAAU,EAAxD,CAAd;AACA,aAAO,KAAP;AAN+B;AAOlC,GA9BqB,CAgCtB;;;AACa,EAAA,QAAQ,CAAC,KAAD,EAAkB;AAAA;;AAAA;AACnC,YAAM,UAAU,GAAa,UAAU,CAAC,iBAAX,CAA6B,KAA7B,CAA7B;AACA,YAAM,UAAU,SAAS,MAAI,CAAC,IAAL,CAAU,IAAV,CAA2B,WAAW,CAAC,SAAvC,EAAkD,UAAlD,EAA8D,SAA9D,EAAzB;AACA,MAAA,KAAK,CAAC,QAAN,CAAe,gBAAgB,CAAC,UAAD,CAA/B;AACA,aAAO,UAAP;AAJmC;AAKtC;;AAtCqB;;;mBAAb,a,EAAa,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAb,a;AAAa,EAAA,OAAA,EAAb,aAAa,CAAA,I;AAAA,EAAA,UAAA,EAFZ","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport OrderModel from '../models/order.model';\nimport store from '../redux/store';\nimport { orderAddedAction, ordersDownloadedAction } from '../redux/orders-state';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrdersService {\n\n  constructor(private http: HttpClient) { }\n\n    // Get all Orders: \n    public async getAllOrders() {\n        if (store.getState().ordersState.orders.length === 0) {\n            const orders = await this.http.get<OrderModel[]>(environment.ordersUrl).toPromise();\n            store.dispatch(ordersDownloadedAction(orders));\n        }\n        return store.getState().ordersState.orders;\n    }\n\n    // Get all UserOrders: \n    public async getAllUserOrders(userId: string) {\n        if (store.getState().ordersState.orders.length === 0) {\n            const orders = await this.http.get<OrderModel[]>(environment.ordersUrl + \"all/\" + userId).toPromise();\n            store.dispatch(ordersDownloadedAction(orders));\n        }\n        return store.getState().ordersState.orders;\n    }\n\n    // Get one order: \n    public async getOneOrder(id: string) {\n        if (store.getState().ordersState.orders.length === 0) {\n            const orders = await this.http.get<OrderModel[]>(environment.ordersUrl).toPromise();\n            store.dispatch(ordersDownloadedAction(orders));\n        }\n        const order = store.getState().ordersState.orders.find(p => p._id === id);\n        return order;\n    }\n\n    // Add order: \n    public async addOrder(order: OrderModel) {\n        const myFormData: FormData = OrderModel.convertToFormData(order);\n        const addedOrder = await this.http.post<OrderModel>(environment.ordersUrl, myFormData).toPromise();\n        store.dispatch(orderAddedAction(addedOrder));\n        return addedOrder;\n    }\n\n}\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}