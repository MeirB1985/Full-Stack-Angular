{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/Desktop/FullStack/JB/Third Project/fe/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from 'src/environments/environment';\nimport CartModel from '../models/cart.model';\nimport { cartAddedAction, cartDeletedAction, cartsDownloadedAction, cartUpdatedAction } from '../redux/carts-state';\nimport store from '../redux/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartsService {\n  constructor(http) {\n    this.http = http;\n  } // Get all Carts: \n\n\n  getAllCarts(userId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (store.getState().cartsState.carts.length === 0) {\n        // const cart = store.getState().cartsState.carts.find(p => p._id === id);\n        const carts = yield _this.http.get(environment.cartsUrl + \"all/\" + userId).toPromise();\n        store.dispatch(cartsDownloadedAction(carts));\n      }\n\n      return store.getState().cartsState.carts;\n    })();\n  } // Get one cart: \n\n\n  getOneCart(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (store.getState().cartsState.carts.length === 0) {\n        const carts = yield _this2.http.get(environment.cartsUrl).toPromise();\n        store.dispatch(cartsDownloadedAction(carts));\n      }\n\n      const cart = store.getState().cartsState.carts.find(p => p._id === id);\n      return cart;\n    })();\n  } // Add cart: \n\n\n  addCart(cart) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const myFormData = CartModel.convertToFormData(cart);\n      const addedCart = yield _this3.http.post(environment.cartsUrl, myFormData).toPromise();\n      store.dispatch(cartAddedAction(addedCart));\n      return addedCart;\n    })();\n  } // Update cart: \n\n\n  updateCart(cart) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const myFormData = CartModel.convertToFormData(cart);\n      const updatedCart = yield _this4.http.put(environment.cartsUrl + cart._id, myFormData).toPromise();\n      store.dispatch(cartUpdatedAction(updatedCart));\n      return updatedCart;\n    })();\n  } // Delete cart: \n\n\n  deleteCart(id) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this5.http.delete(environment.cartsUrl + \"all/\" + id).toPromise();\n      store.dispatch(cartDeletedAction(id));\n    })();\n  }\n\n}\n\nCartsService.ɵfac = function CartsService_Factory(t) {\n  return new (t || CartsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nCartsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartsService,\n  factory: CartsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\FullStack\\JB\\Third Project\\fe\\src\\app\\services\\carts.service.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAA4B,8BAA5B;AACA,OAAO,SAAP,MAAsB,sBAAtB;AACA,SAAS,eAAT,EAA0B,iBAA1B,EAA6C,qBAA7C,EAAoE,iBAApE,QAA6F,sBAA7F;AACA,OAAO,KAAP,MAAkB,gBAAlB;;;AAKA,OAAM,MAAO,YAAP,CAAmB;AAEvB,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA;AAAqB,GAFlB,CAIrB;;;AACa,EAAA,WAAW,CAAC,MAAD,EAAe;AAAA;;AAAA;AACnC,UAAI,KAAK,CAAC,QAAN,GAAiB,UAAjB,CAA4B,KAA5B,CAAkC,MAAlC,KAA6C,CAAjD,EAAoD;AAChD;AACA,cAAM,KAAK,SAAS,KAAI,CAAC,IAAL,CAAU,GAAV,CAA2B,WAAW,CAAC,QAAZ,GAAuB,MAAvB,GAAgC,MAA3D,EAAmE,SAAnE,EAApB;AACA,QAAA,KAAK,CAAC,QAAN,CAAe,qBAAqB,CAAC,KAAD,CAApC;AACH;;AACD,aAAO,KAAK,CAAC,QAAN,GAAiB,UAAjB,CAA4B,KAAnC;AANmC;AAOtC,GAZoB,CAcrB;;;AACa,EAAA,UAAU,CAAC,EAAD,EAAW;AAAA;;AAAA;AAC9B,UAAI,KAAK,CAAC,QAAN,GAAiB,UAAjB,CAA4B,KAA5B,CAAkC,MAAlC,KAA6C,CAAjD,EAAoD;AAChD,cAAM,KAAK,SAAS,MAAI,CAAC,IAAL,CAAU,GAAV,CAA2B,WAAW,CAAC,QAAvC,EAAiD,SAAjD,EAApB;AACA,QAAA,KAAK,CAAC,QAAN,CAAe,qBAAqB,CAAC,KAAD,CAApC;AACH;;AACD,YAAM,IAAI,GAAG,KAAK,CAAC,QAAN,GAAiB,UAAjB,CAA4B,KAA5B,CAAkC,IAAlC,CAAuC,CAAC,IAAI,CAAC,CAAC,GAAF,KAAU,EAAtD,CAAb;AACA,aAAO,IAAP;AAN8B;AAOjC,GAtBoB,CAwBrB;;;AACa,EAAA,OAAO,CAAC,IAAD,EAAgB;AAAA;;AAAA;AAChC,YAAM,UAAU,GAAa,SAAS,CAAC,iBAAV,CAA4B,IAA5B,CAA7B;AACA,YAAM,SAAS,SAAS,MAAI,CAAC,IAAL,CAAU,IAAV,CAA0B,WAAW,CAAC,QAAtC,EAAgD,UAAhD,EAA4D,SAA5D,EAAxB;AACA,MAAA,KAAK,CAAC,QAAN,CAAe,eAAe,CAAC,SAAD,CAA9B;AACA,aAAO,SAAP;AAJgC;AAKnC,GA9BoB,CAgCrB;;;AACa,EAAA,UAAU,CAAC,IAAD,EAAgB;AAAA;;AAAA;AACnC,YAAM,UAAU,GAAa,SAAS,CAAC,iBAAV,CAA4B,IAA5B,CAA7B;AACA,YAAM,WAAW,SAAS,MAAI,CAAC,IAAL,CAAU,GAAV,CAAyB,WAAW,CAAC,QAAZ,GAAuB,IAAI,CAAC,GAArD,EAA0D,UAA1D,EAAsE,SAAtE,EAA1B;AACA,MAAA,KAAK,CAAC,QAAN,CAAe,iBAAiB,CAAC,WAAD,CAAhC;AACA,aAAO,WAAP;AAJmC;AAKtC,GAtCoB,CAwCrB;;;AACa,EAAA,UAAU,CAAC,EAAD,EAAW;AAAA;;AAAA;AAC9B,YAAM,MAAI,CAAC,IAAL,CAAU,MAAV,CAAiB,WAAW,CAAC,QAAZ,GAAuB,MAAvB,GAAgC,EAAjD,EAAqD,SAArD,EAAN;AACA,MAAA,KAAK,CAAC,QAAN,CAAe,iBAAiB,CAAC,EAAD,CAAhC;AAF8B;AAGjC;;AA5CoB;;;mBAAZ,Y,EAAY,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAZ,Y;AAAY,EAAA,OAAA,EAAZ,YAAY,CAAA,I;AAAA,EAAA,UAAA,EAFX","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport CartModel from '../models/cart.model';\nimport { cartAddedAction, cartDeletedAction, cartsDownloadedAction, cartUpdatedAction } from '../redux/carts-state';\nimport store from '../redux/store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartsService {\n\n  constructor(private http: HttpClient) { }\n\n    // Get all Carts: \n    public async getAllCarts(userId: string) {\n        if (store.getState().cartsState.carts.length === 0) {\n            // const cart = store.getState().cartsState.carts.find(p => p._id === id);\n            const carts = await this.http.get<CartModel[]>(environment.cartsUrl + \"all/\" + userId).toPromise();\n            store.dispatch(cartsDownloadedAction(carts));\n        }\n        return store.getState().cartsState.carts;\n    }\n\n    // Get one cart: \n    public async getOneCart(id: string) {\n        if (store.getState().cartsState.carts.length === 0) {\n            const carts = await this.http.get<CartModel[]>(environment.cartsUrl).toPromise();\n            store.dispatch(cartsDownloadedAction(carts));\n        }\n        const cart = store.getState().cartsState.carts.find(p => p._id === id);\n        return cart;\n    }\n\n    // Add cart: \n    public async addCart(cart: CartModel) {\n        const myFormData: FormData = CartModel.convertToFormData(cart);\n        const addedCart = await this.http.post<CartModel>(environment.cartsUrl, myFormData).toPromise();\n        store.dispatch(cartAddedAction(addedCart));\n        return addedCart;\n    }\n\n    // Update cart: \n    public async updateCart(cart: CartModel) {\n        const myFormData: FormData = CartModel.convertToFormData(cart);\n        const updatedCart = await this.http.put<CartModel>(environment.cartsUrl + cart._id, myFormData).toPromise();\n        store.dispatch(cartUpdatedAction(updatedCart));\n        return updatedCart;\n    }\n\n    // Delete cart: \n    public async deleteCart(id: string) {\n        await this.http.delete(environment.cartsUrl + \"all/\" + id).toPromise();\n        store.dispatch(cartDeletedAction(id));\n    }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}