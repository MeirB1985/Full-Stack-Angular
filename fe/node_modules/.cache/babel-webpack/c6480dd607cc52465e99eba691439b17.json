{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/Desktop/FullStack/JB/ThirdProject/fe/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from 'src/environments/environment';\nimport ItemModel from '../models/item.model';\nimport { itemAddedAction, itemsDownloadedAction, itemDeletedAction, itemDeleteAllAction } from '../redux/items-state';\nimport store from '../redux/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ItemsService {\n  constructor(http) {\n    this.http = http;\n  } // Get all Items: \n\n\n  getAllItems(cartId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (store.getState().itemsState.items.length === 0) {\n        const items = yield _this.http.get(environment.itemUrl + \"all/\" + cartId).toPromise();\n        store.dispatch(itemsDownloadedAction(items));\n      }\n\n      return store.getState().itemsState.items;\n    })();\n  } // Get one item: \n\n\n  getOneItem(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (store.getState().itemsState.items.length === 0) {\n        const items = yield _this2.http.get(environment.itemUrl).toPromise();\n        store.dispatch(itemsDownloadedAction(items));\n      }\n\n      const item = store.getState().itemsState.items.find(p => p._id === id);\n      return item;\n    })();\n  } // Add item: \n\n\n  addItem(item) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const myFormData = ItemModel.convertToFormData(item);\n      const addedItem = yield _this3.http.post(environment.itemUrl, myFormData).toPromise();\n      store.dispatch(itemAddedAction(addedItem));\n      return addedItem;\n    })();\n  } // Delete product: \n\n\n  deleteItem(id) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this4.http.delete(environment.itemUrl + id).toPromise();\n      store.dispatch(itemDeletedAction(id));\n    })();\n  } // Delete all: \n\n\n  deleteAll() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this5.http.delete(environment.itemUrl).toPromise();\n      store.dispatch(itemDeleteAllAction());\n    })();\n  }\n\n}\n\nItemsService.ɵfac = function ItemsService_Factory(t) {\n  return new (t || ItemsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nItemsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ItemsService,\n  factory: ItemsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\FullStack\\JB\\ThirdProject\\fe\\src\\app\\services\\items.service.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAA4B,8BAA5B;AACA,OAAO,SAAP,MAAsB,sBAAtB;AACA,SAAS,eAAT,EAA0B,qBAA1B,EAAiD,iBAAjD,EAAoE,mBAApE,QAA+F,sBAA/F;AACA,OAAO,KAAP,MAAkB,gBAAlB;;;AAKA,OAAM,MAAO,YAAP,CAAmB;AAEvB,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA;AAAqB,GAFlB,CAIvB;;;AACa,EAAA,WAAW,CAAC,MAAD,EAAe;AAAA;;AAAA;AACrC,UAAI,KAAK,CAAC,QAAN,GAAiB,UAAjB,CAA4B,KAA5B,CAAkC,MAAlC,KAA6C,CAAjD,EAAoD;AAChD,cAAM,KAAK,SAAS,KAAI,CAAC,IAAL,CAAU,GAAV,CAA2B,WAAW,CAAC,OAAZ,GAAsB,MAAtB,GAA+B,MAA1D,EAAkE,SAAlE,EAApB;AACA,QAAA,KAAK,CAAC,QAAN,CAAe,qBAAqB,CAAC,KAAD,CAApC;AACH;;AACD,aAAO,KAAK,CAAC,QAAN,GAAiB,UAAjB,CAA4B,KAAnC;AALqC;AAMtC,GAXsB,CAavB;;;AACa,EAAA,UAAU,CAAC,EAAD,EAAW;AAAA;;AAAA;AAChC,UAAI,KAAK,CAAC,QAAN,GAAiB,UAAjB,CAA4B,KAA5B,CAAkC,MAAlC,KAA6C,CAAjD,EAAoD;AAChD,cAAM,KAAK,SAAS,MAAI,CAAC,IAAL,CAAU,GAAV,CAA2B,WAAW,CAAC,OAAvC,EAAgD,SAAhD,EAApB;AACA,QAAA,KAAK,CAAC,QAAN,CAAe,qBAAqB,CAAC,KAAD,CAApC;AACH;;AACD,YAAM,IAAI,GAAG,KAAK,CAAC,QAAN,GAAiB,UAAjB,CAA4B,KAA5B,CAAkC,IAAlC,CAAuC,CAAC,IAAI,CAAC,CAAC,GAAF,KAAU,EAAtD,CAAb;AACA,aAAO,IAAP;AANgC;AAOjC,GArBsB,CAuBvB;;;AACa,EAAA,OAAO,CAAC,IAAD,EAAgB;AAAA;;AAAA;AAClC,YAAM,UAAU,GAAa,SAAS,CAAC,iBAAV,CAA4B,IAA5B,CAA7B;AACA,YAAM,SAAS,SAAS,MAAI,CAAC,IAAL,CAAU,IAAV,CAA0B,WAAW,CAAC,OAAtC,EAA+C,UAA/C,EAA2D,SAA3D,EAAxB;AACA,MAAA,KAAK,CAAC,QAAN,CAAe,eAAe,CAAC,SAAD,CAA9B;AACA,aAAO,SAAP;AAJkC;AAKnC,GA7BsB,CA+BvB;;;AACa,EAAA,UAAU,CAAC,EAAD,EAAW;AAAA;;AAAA;AAChC,YAAM,MAAI,CAAC,IAAL,CAAU,MAAV,CAAiB,WAAW,CAAC,OAAZ,GAAsB,EAAvC,EAA2C,SAA3C,EAAN;AACA,MAAA,KAAK,CAAC,QAAN,CAAe,iBAAiB,CAAC,EAAD,CAAhC;AAFgC;AAGjC,GAnCsB,CAqCvB;;;AACa,EAAA,SAAS,GAAA;AAAA;;AAAA;AACpB,YAAM,MAAI,CAAC,IAAL,CAAU,MAAV,CAAiB,WAAW,CAAC,OAA7B,EAAsC,SAAtC,EAAN;AACA,MAAA,KAAK,CAAC,QAAN,CAAe,mBAAmB,EAAlC;AAFoB;AAGrB;;AAzCsB;;;mBAAZ,Y,EAAY,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAZ,Y;AAAY,EAAA,OAAA,EAAZ,YAAY,CAAA,I;AAAA,EAAA,UAAA,EAFX","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport ItemModel from '../models/item.model';\nimport { itemAddedAction, itemsDownloadedAction, itemDeletedAction, itemDeleteAllAction } from '../redux/items-state';\nimport store from '../redux/store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ItemsService {\n\n  constructor(private http: HttpClient) { }\n\n  // Get all Items: \n  public async getAllItems(cartId: string) {\n    if (store.getState().itemsState.items.length === 0) {\n        const items = await this.http.get<ItemModel[]>(environment.itemUrl + \"all/\" + cartId).toPromise();\n        store.dispatch(itemsDownloadedAction(items));\n    }\n    return store.getState().itemsState.items;\n  }\n\n  // Get one item: \n  public async getOneItem(id: string) {\n    if (store.getState().itemsState.items.length === 0) {\n        const items = await this.http.get<ItemModel[]>(environment.itemUrl).toPromise();\n        store.dispatch(itemsDownloadedAction(items));\n    }\n    const item = store.getState().itemsState.items.find(p => p._id === id);\n    return item;\n  }\n\n  // Add item: \n  public async addItem(item: ItemModel) {\n    const myFormData: FormData = ItemModel.convertToFormData(item);\n    const addedItem = await this.http.post<ItemModel>(environment.itemUrl, myFormData).toPromise();\n    store.dispatch(itemAddedAction(addedItem));\n    return addedItem;\n  }\n\n  // Delete product: \n  public async deleteItem(id: string) {\n    await this.http.delete(environment.itemUrl + id).toPromise();\n    store.dispatch(itemDeletedAction(id));\n  }\n\n  // Delete all: \n  public async deleteAll() {\n    await this.http.delete(environment.itemUrl).toPromise();\n    store.dispatch(itemDeleteAllAction());\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}